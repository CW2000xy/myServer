// Code generated by protoc-gen-go.
// source: dba_msg.proto
// DO NOT EDIT!

package protocol

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type DBASqlType int32

const (
	DBASqlType_Select_NoReturn DBASqlType = 0
	DBASqlType_Select          DBASqlType = 1
	DBASqlType_Update          DBASqlType = 2
	DBASqlType_Insert          DBASqlType = 3
	DBASqlType_Delete          DBASqlType = 4
)

var DBASqlType_name = map[int32]string{
	0: "Select_NoReturn",
	1: "Select",
	2: "Update",
	3: "Insert",
	4: "Delete",
}
var DBASqlType_value = map[string]int32{
	"Select_NoReturn": 0,
	"Select":          1,
	"Update":          2,
	"Insert":          3,
	"Delete":          4,
}

func (x DBASqlType) Enum() *DBASqlType {
	p := new(DBASqlType)
	*p = x
	return p
}
func (x DBASqlType) String() string {
	return proto.EnumName(DBASqlType_name, int32(x))
}
func (x *DBASqlType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DBASqlType_value, data, "DBASqlType")
	if err != nil {
		return err
	}
	*x = DBASqlType(value)
	return nil
}

// 和数据服务器之间 操作数据库
type DBAServerReqMsg struct {
	EventID          *int64  `protobuf:"varint,1,opt" json:"EventID,omitempty"`
	Type             *int32  `protobuf:"varint,2,opt" json:"Type,omitempty"`
	SqlStr           *string `protobuf:"bytes,3,opt" json:"SqlStr,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DBAServerReqMsg) Reset()         { *m = DBAServerReqMsg{} }
func (m *DBAServerReqMsg) String() string { return proto.CompactTextString(m) }
func (*DBAServerReqMsg) ProtoMessage()    {}

func (m *DBAServerReqMsg) GetEventID() int64 {
	if m != nil && m.EventID != nil {
		return *m.EventID
	}
	return 0
}

func (m *DBAServerReqMsg) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *DBAServerReqMsg) GetSqlStr() string {
	if m != nil && m.SqlStr != nil {
		return *m.SqlStr
	}
	return ""
}

type DBARow struct {
	ColData          []string `protobuf:"bytes,1,rep" json:"ColData,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DBARow) Reset()         { *m = DBARow{} }
func (m *DBARow) String() string { return proto.CompactTextString(m) }
func (*DBARow) ProtoMessage()    {}

func (m *DBARow) GetColData() []string {
	if m != nil {
		return m.ColData
	}
	return nil
}

// 和数据服务器之间 操作数据库 返回相应信息,
type DBAServerAckMsg struct {
	EventID          *int64    `protobuf:"varint,1,opt" json:"EventID,omitempty"`
	DBARow           []*DBARow `protobuf:"bytes,2,rep" json:"DBARow,omitempty"`
	Error            *int64    `protobuf:"varint,3,opt" json:"Error,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *DBAServerAckMsg) Reset()         { *m = DBAServerAckMsg{} }
func (m *DBAServerAckMsg) String() string { return proto.CompactTextString(m) }
func (*DBAServerAckMsg) ProtoMessage()    {}

func (m *DBAServerAckMsg) GetEventID() int64 {
	if m != nil && m.EventID != nil {
		return *m.EventID
	}
	return 0
}

func (m *DBAServerAckMsg) GetDBARow() []*DBARow {
	if m != nil {
		return m.DBARow
	}
	return nil
}

func (m *DBAServerAckMsg) GetError() int64 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return 0
}

func init() {
	proto.RegisterEnum("protocol.DBASqlType", DBASqlType_name, DBASqlType_value)
}
